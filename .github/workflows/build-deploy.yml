name: Build, Test and Deploy

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    
permissions:  # <--- Here, 'permissions' is at the top level, same as 'name' and 'on'
  id-token: write
  contents: read
  
jobs:
  build-and-test: # Renamed job to reflect both build and test phases
    runs-on: ubuntu-latest # <--- ADD THIS LINE
      
    steps:
    - uses: actions/checkout@v3
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18' # Or your specific Node.js version (e.g., '16', '20')

    - name: Install Dependencies
      run: npm ci
 

#<<<<<<< HEAD
#=======
   # - name: SonarQube Scan
     # uses: SonarSource/sonarqube-scan-action@v5.0.0
      #env:
       # SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #  with:
        #projectBaseDir: . # Or the path to your source code if not root
       # args: >
        #  -Dsonar.projectKey=fss-Retail-App_kubernetes
         # -Dsonar.organization=aryansodhiya # If using SonarCloud, or your local instance's org
         # -Dsonar.sources=.
         # -Dsonar.branch.name=master
          #-Dsonar.scm.provider=git
          # If you have a SonarQube server URL:
          # -Dsonar.host.url=<YOUR_SONARQUBE_SERVER_URL>
          # Example for SonarCloud: -Dsonar.host.url=https://sonarcloud.io
#>>>>>>> df0fc33b867d264e07530039446c25ceea11d87f

    # --- Docker Build & Push Phase ---
    

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/fss-retail-app_kubernetes:${{ github.sha }} \
                     -t ${{ secrets.DOCKER_HUB_USERNAME }}/fss-retail-app_kubernetes:latest .
        echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV # Set an environment variable for the tag

    - name: Login to Docker Hub
      run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

    - name: Push Docker image
      run: |
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/fss-retail-app_kubernetes:${{ env.IMAGE_TAG }}
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/fss-retail-app_kubernetes:latest

# --- EKS Deployment Steps ---
    # ... (previous steps like Build Docker image, Login to Docker Hub, Push Docker image) ...

      # --- EKS Deployment Steps ---
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
          role-to-assume: arn:aws:iam::238287277510:role/fss-Retail-App_kubernetes-2 # Your IAM Role ARN
          aws-region: ap-south-1 # <-- IMPORTANT: Replace with your EKS cluster's region (e.g., ap-south-1, us-east-1)

    - name: Install kubectl
      uses: azure/setup-kubectl@v3

    - name: Update Kubeconfig for EKS
      run: |
          aws eks update-kubeconfig --name fss-Retail-App_kubernetes --region ap-south-1 # <-- IMPORTANT: Replace with your EKS CLUSTER NAME & REGION
          echo "Kubeconfig updated. Testing connection:"
          kubectl config view --minify
          kubectl get nodes

    - name: Deploy to EKS
      run: |
          # Dynamically update the image tag in deployment.yaml
          yq e '.spec.template.spec.containers[0].image = "${{ secrets.DOCKER_HUB_USERNAME }}/fss-retail-app_kubernetes:${{ env.IMAGE_TAG }}"' -i userprofile-deployment.yml

          echo "Applying Kubernetes manifests..."
          kubectl apply -f mongodb-deployment.yml
          kubectl apply -f mongodb-service.yml
          kubectl apply -f usernode-js-service.yml # Keep this if it's a separate service file in your root
          kubectl apply -f userprofile-deployment.yml # This contains your main app deployment and its service
    
          echo "Deployment successful!"







  # --- Deployment Job ---
  #deploy:
    #runs-on: ubuntu-latest
    #needs: build-and-test # This job depends on the successful completion of the 'build-and-test' job
    #if: github.ref == 'refs/heads/master' # Only deploy when pushing to the master branch

    #steps:
    #- uses: actions/checkout@v3

    # --- Kubernetes Deployment Example ---
    # This section assumes you want to deploy to a Kubernetes cluster.
    # You'll need to adjust this based on your actual deployment strategy.

    #- name: Install kubectl
      #uses: azure/setup-kubectl@v3
      #with:
       #version: 'v1.28.0' # Or your desired kubectl version

    #- name: Configure Kubeconfig
      #run: |
        # This is a generic example. You'll need to securely store your Kubeconfig
        # as a GitHub Secret (e.g., KUBE_CONFIG_BASE64) and decode it.
        # NEVER hardcode sensitive information.
        #echo "${{ secrets.KUBE_CONFIG_BASE64 }}" | base64 --decode > ~/.kube/config
        #chmod 600 ~/.kube/config # Set appropriate permissions

    #- name: Update Kubernetes Deployment Image
      # This step assumes you have a Kubernetes deployment manifest (e.g., deployment.yaml)
      # and you want to update the image tag.
      #run: |
        # Example using sed to update the image tag in a YAML file.
        # Adjust 'your-deployment-name' and 'your-container-name'
        # This is a basic example; for more complex deployments, consider Kustomize, Helm, or specialized actions.
        #sed -i "s|image: .*/fss-retail-app_kubernetes:.*|image: ${{ secrets.DOCKER_HUB_USERNAME }}/fss-retail-app_kubernetes:${{ github.sha }}|" kubernetes/deployment.yaml # Adjust path if needed
        #cat kubernetes/deployment.yaml # For debugging: show the updated file

    #- name: Apply Kubernetes Deployment
      #run: kubectl apply -f kubernetes/ # Apply all manifests in the kubernetes/ directory
      #env:
        # If your Kubernetes cluster requires specific environment variables for authentication, add them here.
        #KUBECONFIG: ~/.kube/config # Ensure kubectl uses the decoded config file

    # --- Alternative Deployment (e.g., SSH, Heroku, AWS ECS/EKS, Azure AKS) ---
    # You would replace the Kubernetes steps with actions specific to your deployment target.
    # Examples:
    # - If deploying via SSH:
    #   - uses: appleboy/ssh-action@master
    #     with:
    #       host: ${{ secrets.SSH_HOST }}
    #       username: ${{ secrets.SSH_USERNAME }}
    #       key: ${{ secrets.SSH_PRIVATE_KEY }}
    #       script: |
    #         cd /path/to/your/app
    #         docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/fss-retail-app_kubernetes:latest
    #         docker stop your-app-container || true
    #         docker rm your-app-container || true
    #         docker run -d --name your-app-container -p 80:3000 ${{ secrets.DOCKER_HUB_USERNAME }}/fss-retail-app_kubernetes:latest

    # - If deploying to AWS EKS/ECS, you'd use AWS-specific actions like configure-aws-credentials, ecr-login, etc.
    #   - uses: aws-actions/configure-aws-credentials@v1
    #     with:
    #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #       aws-region: your-aws-region
    #   - name: Update EKS Kubeconfig
    #     run: aws eks update-kubeconfig --name your-eks-cluster-name --region your-aws-region
    #   - name: Deploy to EKS
    #     run: kubectl apply -f your-eks-deployment.yaml
